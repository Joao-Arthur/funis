import{_ as s,c as a,o as n,a as p}from"./app.a31b0557.js";const d=JSON.parse('{"title":"pipe","description":"","frontmatter":{},"headers":[{"level":2,"title":"Example","slug":"example","link":"#example","children":[]}],"relativePath":"standard/pipe.md"}'),e={name:"standard/pipe.md"},l=p(`<h1 id="pipe" tabindex="-1">pipe <a class="header-anchor" href="#pipe" aria-hidden="true">#</a></h1><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">...</span></span>
<span class="line"></span></code></pre></div><p>Returns a function that apply the result of each function to the next one in the order they are defined.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Typescript does not infer the type of the first function argument when you call the function.</p><p>To ensure type-safety, you have to explicit type the first function.</p></div><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">pipe</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// =&gt; 20</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// =&gt; 15</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// =&gt; 5</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> is the result</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// =&gt; &#39;5 is the result&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">)(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;">// =&gt; &#39;5 is the result&#39;</span></span>
<span class="line"></span></code></pre></div>`,6),o=[l];function t(c,r,C,i,y,A){return n(),a("div",null,o)}const u=s(e,[["render",t]]);export{d as __pageData,u as default};
